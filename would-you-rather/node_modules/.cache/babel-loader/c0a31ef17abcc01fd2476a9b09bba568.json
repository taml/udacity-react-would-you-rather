{"ast":null,"code":"var _jsxFileName = \"/Users/tam/React/reactnd-project-would-you-rather-starter/would-you-rather/src/components/Question.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { formatDate } from '../utils/helper';\nimport { handleAnswerQuestion } from '../actions/shared';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Question extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selected: 'optionOne'\n    };\n\n    this.answerColor = color => color === true ? 'red' : 'black';\n\n    this.percentageOfVoters = (noAnswers, noOfUsers) => Math.round(noAnswers / noOfUsers * 100);\n\n    this.handleSelected = e => {\n      const selected = e.target.value;\n      this.setState(() => ({\n        selected\n      }));\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const {\n        dispatch,\n        authedUser,\n        id\n      } = this.props;\n      const userAnswer = {\n        authedUser,\n        qid: id,\n        answer: this.state\n      };\n      dispatch(handleAnswerQuestion());\n    };\n  }\n\n  render() {\n    const {\n      question,\n      authorAvatar,\n      answeredQOne,\n      answeredQTwo,\n      noOfUsers\n    } = this.props;\n    const {\n      author,\n      timestamp\n    } = question;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Would you rather...?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `By ${author}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        width: \"100\",\n        height: \"100\",\n        src: authorAvatar,\n        alt: `${author} Avatar`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Posted on ${formatDate(timestamp)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), (answeredQOne === !true || answeredQTwo === !true) && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"optionOne\",\n            checked: this.state.selected === 'optionOne',\n            onChange: this.handleSelected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this), question.optionOne.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), (answeredQOne === true || answeredQTwo === true) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: this.answerColor(answeredQOne)\n          },\n          children: question.optionOne.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [question.optionOne.votes.length, \" Answers\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [this.percentageOfVoters(question.optionOne.votes.length, noOfUsers), \" % of Users have selected this option\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: this.answerColor(answeredQTwo)\n          },\n          children: question.optionTwo.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [question.optionTwo.votes.length, \" Answers\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [this.percentageOfVoters(question.optionTwo.votes.length, noOfUsers), \" % of Users have selected this option\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}, {\n  id\n}) {\n  const question = Object.values(questions).filter(question => question.id === id);\n  const authorAvatar = users[question[0].author].avatarURL;\n  const answeredOne = question[0].optionOne.votes.filter(vote => vote === authedUser);\n  const answeredTwo = question[0].optionTwo.votes.filter(vote => vote === authedUser);\n  return {\n    question: question[0],\n    authorAvatar,\n    answeredQOne: answeredOne.length === 1,\n    answeredQTwo: answeredTwo.length === 1,\n    noOfUsers: Object.values(users).length,\n    authedUser,\n    id\n  };\n}\n\nexport default connect(mapStateToProps)(Question);","map":{"version":3,"sources":["/Users/tam/React/reactnd-project-would-you-rather-starter/would-you-rather/src/components/Question.js"],"names":["React","Component","connect","formatDate","handleAnswerQuestion","Question","state","selected","answerColor","color","percentageOfVoters","noAnswers","noOfUsers","Math","round","handleSelected","e","target","value","setState","handleSubmit","preventDefault","dispatch","authedUser","id","props","userAnswer","qid","answer","render","question","authorAvatar","answeredQOne","answeredQTwo","author","timestamp","optionOne","text","votes","length","optionTwo","mapStateToProps","questions","users","Object","values","filter","avatarURL","answeredOne","vote","answeredTwo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { formatDate } from '../utils/helper'\nimport { handleAnswerQuestion } from '../actions/shared'\n\nclass Question extends Component {\n\n    state = {\n        selected: 'optionOne',\n    }\n\n    answerColor = (color) => color === true ? 'red' : 'black'\n\n    percentageOfVoters = (noAnswers, noOfUsers) => Math.round((noAnswers / noOfUsers) * 100) \n\n    handleSelected = (e) => {\n        const selected = e.target.value\n        this.setState(() => ({\n            selected\n        }))\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n\n        const { dispatch, authedUser, id } = this.props\n        const userAnswer = {\n            authedUser,\n            qid: id,\n            answer: this.state\n        }\n        dispatch(handleAnswerQuestion())\n    }\n    \n\n    render() {\n        const { question, authorAvatar, answeredQOne, answeredQTwo, noOfUsers } = this.props\n        const { author, timestamp } = question\n        return(\n            <div>\n                <h3>Would you rather...?</h3>\n                <p>{`By ${author}`}</p>\n                <img width=\"100\" height=\"100\" src={authorAvatar} alt={`${author} Avatar`} />\n                <p>{`Posted on ${formatDate(timestamp)}`}</p>\n                {(answeredQOne === !true || answeredQTwo === !true) && \n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            <input type=\"radio\" value=\"optionOne\" checked={this.state.selected === 'optionOne'}\n                                onChange={this.handleSelected} />{question.optionOne.text}\n                        </label>\n                    </form>\n                }\n                {(answeredQOne === true || answeredQTwo === true) && \n                    <div>\n                        <p style={{color: this.answerColor(answeredQOne)}}>{question.optionOne.text}</p>\n                        <p>{question.optionOne.votes.length} Answers</p>\n                        <p>{this.percentageOfVoters(question.optionOne.votes.length, noOfUsers)} % of Users have selected this option</p>\n                        <p style={{color: this.answerColor(answeredQTwo)}}>{ question.optionTwo.text }</p>\n                        <p>{question.optionTwo.votes.length} Answers</p>\n                        <p>{this.percentageOfVoters(question.optionTwo.votes.length, noOfUsers)} % of Users have selected this option</p>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps({ authedUser, questions, users }, { id }){\n    const question = Object.values(questions).filter((question) => question.id === id)\n    const authorAvatar = users[question[0].author].avatarURL\n    const answeredOne = question[0].optionOne.votes.filter((vote) => vote === authedUser)\n    const answeredTwo = question[0].optionTwo.votes.filter((vote) => vote === authedUser)\n    return {\n        question: question[0], \n        authorAvatar,\n        answeredQOne: answeredOne.length === 1,\n        answeredQTwo: answeredTwo.length === 1,\n        noOfUsers: Object.values(users).length,\n        authedUser,\n        id,\n    }\n} \n\nexport default connect(mapStateToProps)(Question)"]},"metadata":{},"sourceType":"module"}