{"ast":null,"code":"var _jsxFileName = \"/Users/tam/React/reactnd-project-would-you-rather-starter/would-you-rather/src/components/Dashboard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Nav from './Nav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  render() {\n    const {\n      authedUser,\n      questions,\n      users\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), \"Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}) {\n  // const answeredQuestionsIds = Object.keys(users[authedUser].answers).map((user) => questions[user].id)\n  // const answeredQuestions = Object.keys(questions).map((question))\n  // .filter((question) => questions[question].id !== answeredQuestionsIds)\n  const qs = Object.keys(questions).map(question => console.log(questions[question].optionOne.votes.find())); // .sort((questionA, questionB) => questions[questionB].timestamp - questions[questionA.timestamp])\n\n  return {\n    authedUser,\n    questions,\n    users\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["/Users/tam/React/reactnd-project-would-you-rather-starter/would-you-rather/src/components/Dashboard.js"],"names":["React","Component","connect","Nav","Dashboard","render","authedUser","questions","users","props","mapStateToProps","qs","Object","keys","map","question","console","log","optionOne","votes","find"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAC9BI,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,SAAd;AAAyBC,MAAAA;AAAzB,QAAkC,KAAKC,KAA7C;AACA,wBACI;AAAA,8BACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAT6B;;AAYlC,SAASC,eAAT,CAAyB;AAAEJ,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA;AAAzB,CAAzB,EAA4D;AAExD;AACA;AAEA;AAEA,QAAMG,EAAE,GAAGC,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBO,GAAvB,CAA4BC,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYV,SAAS,CAACQ,QAAD,CAAT,CAAoBG,SAApB,CAA8BC,KAA9B,CAAoCC,IAApC,EAAZ,CAAzC,CAAX,CAPwD,CAQxD;;AAEA,SAAO;AACHd,IAAAA,UADG;AAEHC,IAAAA,SAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH;;AAED,eAAeN,OAAO,CAACQ,eAAD,CAAP,CAAyBN,SAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Nav from './Nav'\n\nclass Dashboard extends Component {\n    render() {\n        const { authedUser, questions, users} = this.props\n        return(\n            <div>\n                <Nav />\n                Dashboard\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps({ authedUser, questions, users })  {\n\n    // const answeredQuestionsIds = Object.keys(users[authedUser].answers).map((user) => questions[user].id)\n    // const answeredQuestions = Object.keys(questions).map((question))\n    \n    // .filter((question) => questions[question].id !== answeredQuestionsIds)\n\n    const qs = Object.keys(questions).map((question) => console.log(questions[question].optionOne.votes.find()))\n    // .sort((questionA, questionB) => questions[questionB].timestamp - questions[questionA.timestamp])\n\n    return {\n        authedUser, \n        questions,\n        users,\n    }\n}\n\nexport default connect(mapStateToProps)(Dashboard)"]},"metadata":{},"sourceType":"module"}