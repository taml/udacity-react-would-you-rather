{"ast":null,"code":"var _jsxFileName = \"/Users/tam/React/reactnd-project-would-you-rather-starter/would-you-rather/src/components/Dashboard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Nav from './Nav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  render() {\n    const {\n      authedUser,\n      questions,\n      users\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), \"Dashboard\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}) {\n  const answeredQuestionsId = Object.keys(users[authedUser].answers).map(answer => questions[answer].id);\n  const answeredQuestions = Object.keys(users[authedUser].answers).map(answer => questions[answer]).sort((questionA, questionB) => questionB.timestamp - questionA.timestamp);\n  const unansweredQuestions = Object.values(questions).filter(question => !answeredQuestionsId.includes(question.id)).sort((questionA, questionB) => questionB.timestamp - questionA.timestamp);\n  console.log(answeredQuestions);\n  console.log(unansweredQuestions);\n  return {\n    authedUser,\n    questions,\n    users,\n    unansweredQuestions,\n    ans\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["/Users/tam/React/reactnd-project-would-you-rather-starter/would-you-rather/src/components/Dashboard.js"],"names":["React","Component","connect","Nav","Dashboard","render","authedUser","questions","users","props","mapStateToProps","answeredQuestionsId","Object","keys","answers","map","answer","id","answeredQuestions","sort","questionA","questionB","timestamp","unansweredQuestions","values","filter","question","includes","console","log","ans"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAC9BI,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,SAAd;AAAyBC,MAAAA;AAAzB,QAAkC,KAAKC,KAA7C;AACA,wBACI;AAAA,8BACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAT6B;;AAYlC,SAASC,eAAT,CAAyB;AAAEJ,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA;AAAzB,CAAzB,EAA4D;AAExD,QAAMG,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAK,CAACF,UAAD,CAAL,CAAkBQ,OAA9B,EAAuCC,GAAvC,CAA4CC,MAAD,IAAYT,SAAS,CAACS,MAAD,CAAT,CAAkBC,EAAzE,CAA5B;AACA,QAAMC,iBAAiB,GAAGN,MAAM,CAACC,IAAP,CAAYL,KAAK,CAACF,UAAD,CAAL,CAAkBQ,OAA9B,EAAuCC,GAAvC,CAA4CC,MAAD,IAAYT,SAAS,CAACS,MAAD,CAAhE,EACrBG,IADqB,CAChB,CAACC,SAAD,EAAYC,SAAZ,KAA0BA,SAAS,CAACC,SAAV,GAAsBF,SAAS,CAACE,SAD1C,CAA1B;AAEA,QAAMC,mBAAmB,GAAGX,MAAM,CAACY,MAAP,CAAcjB,SAAd,EAAyBkB,MAAzB,CAAiCC,QAAD,IAAc,CAACf,mBAAmB,CAACgB,QAApB,CAA6BD,QAAQ,CAACT,EAAtC,CAA/C,EACvBE,IADuB,CAClB,CAACC,SAAD,EAAYC,SAAZ,KAA0BA,SAAS,CAACC,SAAV,GAAsBF,SAAS,CAACE,SADxC,CAA5B;AAGAM,EAAAA,OAAO,CAACC,GAAR,CAAYX,iBAAZ;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYN,mBAAZ;AAEA,SAAO;AACHjB,IAAAA,UADG;AAEHC,IAAAA,SAFG;AAGHC,IAAAA,KAHG;AAIHe,IAAAA,mBAJG;AAKHO,IAAAA;AALG,GAAP;AAOH;;AAED,eAAe5B,OAAO,CAACQ,eAAD,CAAP,CAAyBN,SAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Nav from './Nav'\n\nclass Dashboard extends Component {\n    render() {\n        const { authedUser, questions, users} = this.props\n        return(\n            <div>\n                <Nav />\n                Dashboard\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps({ authedUser, questions, users })  {\n\n    const answeredQuestionsId = Object.keys(users[authedUser].answers).map((answer) => questions[answer].id)\n    const answeredQuestions = Object.keys(users[authedUser].answers).map((answer) => questions[answer])\n        .sort((questionA, questionB) => questionB.timestamp - questionA.timestamp)\n    const unansweredQuestions = Object.values(questions).filter((question) => !answeredQuestionsId.includes(question.id))\n        .sort((questionA, questionB) => questionB.timestamp - questionA.timestamp)\n    \n    console.log(answeredQuestions)\n    console.log(unansweredQuestions)\n\n    return {\n        authedUser, \n        questions,\n        users,\n        unansweredQuestions,\n        ans\n    }\n}\n\nexport default connect(mapStateToProps)(Dashboard)"]},"metadata":{},"sourceType":"module"}