{"ast":null,"code":"var _jsxFileName = \"/Users/tam/React/reactnd-project-would-you-rather-starter/would-you-rather/src/components/Dashboard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Nav from './Nav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  render() {\n    const {\n      authedUser,\n      questions,\n      users,\n      unansweredQuestions,\n      answeredQuestions\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), unansweredQuestions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Would you rather...?\", question.author, question.timestamp, question.optionOne.text, question.optionOne.text]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}) {\n  const answeredQuestionsId = Object.keys(users[authedUser].answers).map(answer => questions[answer].id);\n  const answeredQuestions = Object.keys(users[authedUser].answers).map(answer => questions[answer]).sort((questionA, questionB) => questionB.timestamp - questionA.timestamp);\n  const unansweredQuestions = Object.values(questions).filter(question => !answeredQuestionsId.includes(question.id)).sort((questionA, questionB) => questionB.timestamp - questionA.timestamp);\n  console.log(answeredQuestions);\n  console.log(unansweredQuestions);\n  return {\n    authedUser,\n    questions,\n    users,\n    unansweredQuestions,\n    answeredQuestions\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["/Users/tam/React/reactnd-project-would-you-rather-starter/would-you-rather/src/components/Dashboard.js"],"names":["React","Component","connect","Nav","Dashboard","render","authedUser","questions","users","unansweredQuestions","answeredQuestions","props","map","question","author","timestamp","optionOne","text","id","mapStateToProps","answeredQuestionsId","Object","keys","answers","answer","sort","questionA","questionB","values","filter","includes","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAC9BI,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,SAAd;AAAyBC,MAAAA,KAAzB;AAAgCC,MAAAA,mBAAhC;AAAqDC,MAAAA;AAArD,QAA2E,KAAKC,KAAtF;AACA,wBACI;AAAA,8BACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,cADJ,EAEMF,mBAAmB,CAACG,GAApB,CAAyBC,QAAD,iBACtB;AAAA,2CAEMA,QAAQ,CAACC,MAFf,EAGMD,QAAQ,CAACE,SAHf,EAIMF,QAAQ,CAACG,SAAT,CAAmBC,IAJzB,EAKMJ,QAAQ,CAACG,SAAT,CAAmBC,IALzB;AAAA,SAASJ,QAAQ,CAACK,EAAlB;AAAA;AAAA;AAAA;AAAA,cADF,CAFN;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAjB6B;;AAoBlC,SAASC,eAAT,CAAyB;AAAEb,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA;AAAzB,CAAzB,EAA4D;AAExD,QAAMY,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYd,KAAK,CAACF,UAAD,CAAL,CAAkBiB,OAA9B,EAAuCX,GAAvC,CAA4CY,MAAD,IAAYjB,SAAS,CAACiB,MAAD,CAAT,CAAkBN,EAAzE,CAA5B;AACA,QAAMR,iBAAiB,GAAGW,MAAM,CAACC,IAAP,CAAYd,KAAK,CAACF,UAAD,CAAL,CAAkBiB,OAA9B,EAAuCX,GAAvC,CAA4CY,MAAD,IAAYjB,SAAS,CAACiB,MAAD,CAAhE,EACrBC,IADqB,CAChB,CAACC,SAAD,EAAYC,SAAZ,KAA0BA,SAAS,CAACZ,SAAV,GAAsBW,SAAS,CAACX,SAD1C,CAA1B;AAEA,QAAMN,mBAAmB,GAAGY,MAAM,CAACO,MAAP,CAAcrB,SAAd,EAAyBsB,MAAzB,CAAiChB,QAAD,IAAc,CAACO,mBAAmB,CAACU,QAApB,CAA6BjB,QAAQ,CAACK,EAAtC,CAA/C,EACvBO,IADuB,CAClB,CAACC,SAAD,EAAYC,SAAZ,KAA0BA,SAAS,CAACZ,SAAV,GAAsBW,SAAS,CAACX,SADxC,CAA5B;AAGAgB,EAAAA,OAAO,CAACC,GAAR,CAAYtB,iBAAZ;AACAqB,EAAAA,OAAO,CAACC,GAAR,CAAYvB,mBAAZ;AAEA,SAAO;AACHH,IAAAA,UADG;AAEHC,IAAAA,SAFG;AAGHC,IAAAA,KAHG;AAIHC,IAAAA,mBAJG;AAKHC,IAAAA;AALG,GAAP;AAOH;;AAED,eAAeR,OAAO,CAACiB,eAAD,CAAP,CAAyBf,SAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Nav from './Nav'\n\nclass Dashboard extends Component {\n    render() {\n        const { authedUser, questions, users, unansweredQuestions, answeredQuestions } = this.props\n        return(\n            <div>\n                <Nav />\n                { unansweredQuestions.map((question) => \n                    <li key={question.id}>\n                        Would you rather...?\n                        { question.author }\n                        { question.timestamp }\n                        { question.optionOne.text }\n                        { question.optionOne.text }\n                    </li>\n                ) }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps({ authedUser, questions, users })  {\n\n    const answeredQuestionsId = Object.keys(users[authedUser].answers).map((answer) => questions[answer].id)\n    const answeredQuestions = Object.keys(users[authedUser].answers).map((answer) => questions[answer])\n        .sort((questionA, questionB) => questionB.timestamp - questionA.timestamp)\n    const unansweredQuestions = Object.values(questions).filter((question) => !answeredQuestionsId.includes(question.id))\n        .sort((questionA, questionB) => questionB.timestamp - questionA.timestamp)\n    \n    console.log(answeredQuestions)\n    console.log(unansweredQuestions)\n\n    return {\n        authedUser, \n        questions,\n        users,\n        unansweredQuestions,\n        answeredQuestions,\n    }\n}\n\nexport default connect(mapStateToProps)(Dashboard)"]},"metadata":{},"sourceType":"module"}